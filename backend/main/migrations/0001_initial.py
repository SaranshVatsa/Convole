# -*- coding: utf-8 -*-
# Generated by Django 1.11.5 on 2017-10-02 15:50
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('image', models.ImageField(blank=True, upload_to='profile_pic/full/')),
                ('primary_phone_No', models.CharField(blank=True, max_length=20)),
                ('about', models.TextField(blank=True, max_length=500, null=True)),
                ('last_login', models.DateTimeField(auto_now_add=True)),
                ('gender', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')], max_length=1)),
                ('dob', models.DateField(blank=True, null=True)),
                ('followerCount', models.IntegerField(default=0)),
                ('followingCount', models.IntegerField(default=0)),
                ('like_privacy', models.BooleanField(default=False)),
                ('saved_privacy', models.BooleanField(default=True)),
                ('reviewed_privacy', models.BooleanField(default=False)),
                ('attending_privacy', models.BooleanField(default=True)),
                ('agreed_privacy', models.BooleanField(default=False)),
                ('Disagreed_privacy', models.BooleanField(default=False)),
                ('reminder_mail', models.BooleanField(default=True)),
                ('updates_mail', models.BooleanField(default=True)),
                ('reported_mail', models.BooleanField(default=True)),
                ('removed_mail', models.BooleanField(default=True)),
                ('agreed_mail', models.BooleanField(default=True)),
                ('Disagreed_mail', models.BooleanField(default=True)),
                ('follow_mail', models.BooleanField(default=True)),
                ('communityUpdates_mail', models.BooleanField(default=True)),
                ('reminder_push', models.BooleanField(default=True)),
                ('updates_push', models.BooleanField(default=True)),
                ('reported_push', models.BooleanField(default=True)),
                ('removed_push', models.BooleanField(default=True)),
                ('agreed_push', models.BooleanField(default=True)),
                ('Disagreed_push', models.BooleanField(default=True)),
                ('follow_push', models.BooleanField(default=True)),
                ('communityUpdates_push', models.BooleanField(default=True)),
                ('is_vip', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('report_count', models.IntegerField(default=0)),
                ('state', models.CharField(choices=[('I', 'Initial'), ('5', '5 Communities join'), ('B', 'Blocked'), ('I', 'Inactive'), ('A', 'Activated')], default='I', max_length=1)),
                ('state_statement', models.CharField(blank=True, max_length=200, null=True)),
                ('plus18', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Column',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('url', models.CharField(max_length=50, unique=True)),
                ('image_large', models.ImageField(blank=True, upload_to='column_pic/full/')),
                ('description', models.TextField(max_length=250)),
                ('rules', models.TextField()),
                ('timeOfCreation', models.DateTimeField(auto_now_add=True)),
                ('postTypeAllowed', models.IntegerField(choices=[(1, 'Link'), (2, 'Images'), (3, 'Videos'), (4, 'Link And Images'), (5, 'Link And Videos'), (6, 'Image and Video'), (7, 'Link And Image And Videos'), (8, 'Event'), (9, 'Noun'), (10, 'Discussion')])),
                ('sortType', models.IntegerField(choices=[(1, 'New'), (2, 'Trending'), (3, 'Top')], default=2)),
                ('state', models.CharField(choices=[('A', 'Under Review'), ('B', 'Blocked'), ('U', 'Under Beta'), ('N', 'Normal')], default='N', max_length=1)),
                ('state_statement', models.CharField(blank=True, max_length=200, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Community',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('url', models.CharField(max_length=50, unique=True)),
                ('timeOfCreation', models.DateTimeField(auto_now_add=True)),
                ('image_large', models.ImageField(blank=True, upload_to='community_pic/full/')),
                ('total_score', models.IntegerField(default=0)),
                ('plus18', models.BooleanField(default=False)),
                ('memberCount', models.IntegerField(default=0)),
                ('description', models.TextField(max_length=250)),
                ('rules', models.TextField()),
                ('state', models.CharField(choices=[('R', 'Under Review'), ('B', 'Blocked'), ('U', 'Under Beta'), ('N', 'Normal')], default='A', max_length=1)),
                ('state_statement', models.CharField(blank=True, max_length=200, null=True)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Devices',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('screen_X', models.IntegerField(blank=True, null=True)),
                ('screen_Y', models.IntegerField(blank=True, null=True)),
                ('type', models.CharField(choices=[('W', 'Web'), ('M', 'Mobile'), ('T', 'Tablet'), ('O', 'other')], default='W', max_length=1)),
                ('os', models.CharField(blank=True, max_length=100, null=True)),
                ('browser', models.CharField(blank=True, max_length=100, null=True)),
                ('time_creation', models.DateTimeField(auto_now_add=True)),
                ('last_login', models.DateTimeField(default=django.utils.timezone.now)),
                ('active', models.BooleanField(default=True)),
                ('deviceId', models.CharField(blank=True, max_length=100, null=True)),
                ('registrationId', models.CharField(blank=True, max_length=100, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Disscussion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timeOfCreation', models.DateTimeField(auto_now_add=True)),
                ('content', models.TextField()),
                ('review', models.IntegerField(default=0)),
                ('treelevel', models.IntegerField(default=0)),
                ('agreedCount', models.IntegerField(default=0)),
                ('disagreedCount', models.IntegerField(default=0)),
                ('report_count', models.IntegerField(default=0)),
                ('state', models.CharField(choices=[('B', 'Blocked'), ('U', 'Report'), ('N', 'Normal'), ('U', 'Verified')], default='N', max_length=1)),
                ('state_statement', models.CharField(blank=True, max_length=200, null=True)),
                ('parentId', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.Disscussion')),
            ],
        ),
        migrations.CreateModel(
            name='ImageInPost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='post/full/')),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('typeId', models.IntegerField()),
                ('time', models.DateTimeField(auto_now_add=True)),
                ('location_of', models.IntegerField(choices=[(1, 'User'), (2, 'Community'), (3, 'Posts')], default=1)),
                ('lat', models.IntegerField(blank=True, null=True)),
                ('long', models.IntegerField(blank=True, null=True)),
                ('streetAddress', models.CharField(blank=True, max_length=100)),
                ('city', models.CharField(blank=True, max_length=50)),
                ('state', models.CharField(blank=True, max_length=50)),
                ('country', models.CharField(blank=True, max_length=30)),
                ('pincode', models.CharField(blank=True, max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_of_Creation', models.DateTimeField(auto_now_add=True)),
                ('title', models.TextField()),
                ('type', models.IntegerField(choices=[(1, 'Link'), (2, 'Images'), (3, 'Videos'), (4, 'Event'), (5, 'Noun'), (6, 'Discussion'), (7, 'Text content')])),
                ('thumbnail', models.ImageField(blank=True, upload_to='post/full/')),
                ('description', models.CharField(blank=True, max_length=250)),
                ('content', models.TextField(blank=True)),
                ('score', models.IntegerField(default=0)),
                ('report_count', models.IntegerField(default=0)),
                ('share_count', models.IntegerField(default=0)),
                ('fee', models.CharField(blank=True, max_length=50)),
                ('Timings', models.CharField(blank=True, max_length=50)),
                ('registrationLink', models.URLField(blank=True)),
                ('attending_count', models.IntegerField(default=0)),
                ('best', models.IntegerField(default=0)),
                ('good', models.IntegerField(default=0)),
                ('normal', models.IntegerField(default=0)),
                ('bad', models.IntegerField(default=0)),
                ('worst', models.IntegerField(default=0)),
                ('link', models.CharField(blank=True, max_length=255, verbose_name='link of post')),
                ('like_count', models.IntegerField(default=0)),
                ('save_count', models.IntegerField(default=0)),
                ('agree_count', models.IntegerField(default=0)),
                ('disagree_count', models.IntegerField(default=0)),
                ('state', models.CharField(choices=[('B', 'Blocked'), ('U', 'Report'), ('N', 'Normal'), ('U', 'Verified')], default='N', max_length=1)),
                ('state_statement', models.CharField(blank=True, max_length=200, null=True)),
                ('search_indexed', models.BooleanField(default=False)),
                ('column', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.Column')),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.Community')),
                ('location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.Location')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserAndDiscussion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('agree', models.BooleanField()),
                ('time_Of_Activity', models.DateTimeField(auto_now_add=True)),
                ('discussion', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.Disscussion')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserAndPost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activity', models.IntegerField(choices=[(1, 'like'), (2, 'save'), (3, 'share'), (4, 'reviewed'), (5, 'agree'), (6, 'disagree'), (7, 'attending')])),
                ('time_Of_Activity', models.DateTimeField(auto_now_add=True)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.Post')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserFollowUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('followingTrue', models.BooleanField(default=True)),
                ('profileVisit', models.IntegerField(default=1)),
                ('time_creation', models.DateTimeField(auto_now_add=True)),
                ('correlation', models.DecimalField(decimal_places=5, max_digits=7, null=True)),
                ('state', models.IntegerField(choices=[(0, 'Initial'), (1, 'Blocked')], default=0)),
                ('follower', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='follower_user', to=settings.AUTH_USER_MODEL)),
                ('following', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='following_user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserJoinsCommunity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_creation', models.DateTimeField(auto_now_add=True)),
                ('joined', models.BooleanField(default=True)),
                ('contributionScore', models.IntegerField(default=0)),
                ('credibilityScore', models.IntegerField(default=0)),
                ('interestScore', models.IntegerField(default=0)),
                ('state', models.IntegerField(choices=[(0, 'Initial'), (1, 'Posting Blocked'), (2, 'Posting and Discussion Blocked'), (3, 'Read Only'), (4, 'Moderator')], default=0)),
                ('state_statement', models.CharField(blank=True, max_length=200, null=True)),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.Community')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='imageinpost',
            name='post',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.Post'),
        ),
        migrations.AddField(
            model_name='disscussion',
            name='post',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.Post'),
        ),
        migrations.AddField(
            model_name='disscussion',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='column',
            name='communtiy',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.Community'),
        ),
        migrations.AddField(
            model_name='column',
            name='creator',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='user',
            name='present_location',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.Location'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='StaffColumn',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
            },
            bases=('main.column',),
        ),
        migrations.CreateModel(
            name='StaffCommunity',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
            },
            bases=('main.community',),
        ),
        migrations.CreateModel(
            name='StaffDisscussion',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
            },
            bases=('main.disscussion',),
        ),
        migrations.CreateModel(
            name='StaffPost',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
            },
            bases=('main.post',),
        ),
        migrations.CreateModel(
            name='StaffUser',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
            },
            bases=('main.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='StaffUserJoinsCommunity',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
            },
            bases=('main.userjoinscommunity',),
        ),
    ]
